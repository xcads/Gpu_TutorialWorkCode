#define _CRT_NO_WARNING_

#include "cuda.h"
#include "host_defines.h"
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include "struct_rotation.h"
#include "book.h"
#include "Header.h"

#include <thrust/copy.h>
#include <thrust/device_ptr.h>
#include <thrust/device_vector.h>
#include <thrust/host_vector.h>
#include <thrust/sequence.h>
#include <thrust/partition.h>
#include <thrust/scan.h>
#include <thrust/remove.h>
#include <thrust/extrema.h>
#include <thrust/unique.h>
#include <thrust/system/cuda/execution_policy.h>
#include <thrust/iterator/reverse_iterator.h>

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
#include <time.h>
#include <string.h>
#include <limits.h>	
#include <float.h>

using namespace std;

#define RANDOM_SEED     7
#define RANDOM_PARA     2000
#define numberOfLines1 10000
#define block_width 512
vector<struct Line> originalConstraints;

int randomSeed = RANDOM_SEED;

int getRandomSeed(int *randomSeed)
{
	(*randomSeed) += RANDOM_PARA;
	if ((*randomSeed) == 0) {
		(*randomSeed) = (int)time(NULL) % RANDOM_SEED + RANDOM_SEED * RANDOM_SEED;
	}
	return ((*randomSeed) * (int)time(NULL));
}

int getRandomInt(int *randomSeed, int Bound)
{
	srand(getRandomSeed(randomSeed));
	return (rand() % Bound);
}


int judgeFeasible(
	thrust::device_vector<double> &t_marker,
	thrust::device_vector<int> &t_active,
	int numberofelements,
	double leftBound,
	double rightBound,
	double *sg,
	double *Sg
)
{
	thrust::counting_iterator<int> first(0);
	thrust::counting_iterator<int> last = first + numberofelements;

	t_active.resize(numberofelements);

	t_active.erase(
		thrust::copy_if(
			first,
			last,
			t_marker.begin(),
			t_active.begin(),
			is_feasible()),
		t_active.end());

	return t_active.size();
}

int seprationG(
	thrust::device_vector<double> &t_marker,
	thrust::device_vector<int> &t_active,
	int numberofelements
)
{
	thrust::counting_iterator<int> first(0);
	thrust::counting_iterator<int> last = first + numberofelements;

	t_active.resize(numberofelements);

	t_active.erase(
		thrust::copy_if(
			first,
			last,
			t_marker.begin(),
			t_active.begin(),
			is_positive()),
		t_active.end());

	return t_active.size();
}

int seprationH(
	thrust::device_vector<double> &t_marker,
	thrust::device_vector<int> &t_active,
	int numberofelements
)
{
	thrust::counting_iterator<int> first(0);
	thrust::counting_iterator<int> last = first + numberofelements;

	t_active.resize(numberofelements);

	t_active.erase(
		thrust::copy_if(
			first,
			last,
			t_marker.begin(),
			t_active.begin(),
			is_negative()),
		t_active.end());

	return t_active.size();
}

int seprationZero(
	thrust::device_vector<double> &t_marker,
	thrust::device_vector<int> &t_active,
	int numberofelements
)
{
	thrust::counting_iterator<int> first(0);
	thrust::counting_iterator<int> last = first + numberofelements;

	t_active.resize(numberofelements);

	t_active.erase(
		thrust::copy_if(
			first,
			last,
			t_marker.begin(),
			t_active.begin(),
			is_zero()),
		t_active.end());

	return t_active.size();
}

int seprationLinesG(
	thrust::device_vector<double> &t_marker,
	thrust::device_vector<int> &t_active,
	int numberofelements
)
{
	thrust::counting_iterator<int> first(0);
	thrust::counting_iterator<int> last = first + numberofelements;

	t_active.resize(numberofelements);

	t_active.erase(
		thrust::copy_if(
			first,
			last,
			t_marker.begin(),
			t_active.begin(),
			is_zero()),
		t_active.end());

	return t_active.size();
}

int judgePrune(
	thrust::device_vector<int> &t_marker,
	thrust::device_vector<int> &t_active,
	int numberofelements
)
{
	thrust::counting_iterator<int> first(0);
	thrust::counting_iterator<int> last = first + numberofelements;

	t_active.resize(numberofelements);

	t_active.erase(
		thrust::copy_if(
			first,
			last,
			t_marker.begin(),
			t_active.begin(),
			is_prune()),
		t_active.end());

	return t_active.size();
}

int findMaxElement(
	thrust::device_vector<double> &t_marker,
	thrust::device_vector<double> &t_active,
	double maxelement
)
{
	t_active.begin() = thrust::max_element(t_marker.begin(), t_marker.end());

	return t_marker.size();
}

int findMinElement(
	thrust::device_vector<double> &t_marker

)
{
	thrust::min_element(t_marker.begin(), t_marker.end());

	return t_marker.size();
}

double rotationAngle(struct Objfunc *object)
{
	double rotationAngle;

	if (object->c2 == 0 && object->c1 > 0) {
		rotationAngle = -PI / 2;
	}
	else if (object->c2 == 0 && object->c1 < 0) {
		rotationAngle = PI / 2;
	}
	else {
		rotationAngle = atan(-object->c1 / object->c2);
	}

	return rotationAngle;
}
//,double *arrayG,double  arrayH[]
__global__ void rotation(
	struct Line constraints[],
	double  *lines1,
	double  *lines2,
	double  *lines3,
	double  *lines_judge,
	double rotationAngle,
	int numberOfLines)
{

	double a1Temp, a2Temp, bTemp;
	//thrust::device_vector<double>  lines1;
	int x = threadIdx.x + blockIdx.x * blockDim.x;
	//	thrust::device_vector<double> lines1;
	if (x < (numberOfLines)) {
		a1Temp = constraints[x].a1;
		a2Temp = constraints[x].a2;
		bTemp = constraints[x].b;

		lines1[x] = (cos(rotationAngle) * a1Temp) + (sin(rotationAngle) * a2Temp);
		lines2[x] = (cos(rotationAngle) * a2Temp) - (sin(rotationAngle) * a1Temp);
		lines3[x] = bTemp;
		lines_judge[x] = lines2[x];

		lines1[x] = -lines1[x] / lines2[x];
		lines3[x] = lines3[x] / lines2[x];
		lines2[x] = 1;


	}

}

__global__ void intersection
(
	double  *lines1,
	double  *lines2,
	double  *lines3,
	double  *lines1g,
	double  *lines2g,
	double  *lines3g,
	int     *arrayJudge,
	double  *vertex_x,
	double  *vertex_y,
	int numberOfLines
)
{
	int x = 2 * (threadIdx.x + blockIdx.x * blockDim.x);
	int bid = threadIdx.x + blockIdx.x*blockDim.x;

	if (x < numberOfLines)
	{

		vertex_x[bid] = (lines3[arrayJudge[x]] - lines3[arrayJudge[x + 1]]) / (lines1[arrayJudge[x]] - lines1[arrayJudge[x + 1]]);
		vertex_y[bid] = (lines1[arrayJudge[x + 1]] * lines3[arrayJudge[x]] - lines1[arrayJudge[x]] * lines3[arrayJudge[x + 1]]) / (lines1[arrayJudge[x + 1]] - lines1[arrayJudge[x]]);
		lines1g[bid] = lines1[arrayJudge[bid]];
		lines2g[bid] = lines2[arrayJudge[bid]];
		lines3g[bid] = lines3[arrayJudge[bid]];

	}

}

__global__ void findSgvalue
(
	double *d_vertex_x,
	double *lines3g,
	double *lines1g,
	double *Value,
	int randomIndex,
	int numberOfG
)
{
	int bid = threadIdx.x + blockDim.x*blockIdx.x;
	if (bid < numberOfG &&lines1g[bid] != DBL_EPSILON) {
		Value[bid] = lines1g[bid] * d_vertex_x[randomIndex] + lines3g[bid];
	}

}
__global__ void findFirstElement
(
	double *d_vertex_x,
	double *lines3g,
	double *lines1g,
	double value,
	double *a1Value,
	int randomIndex,
	int numberOfG
)
{
	int bid = threadIdx.x + blockDim.x*blockIdx.x;
	int x = 0;
	if (bid < numberOfG) {
		if (fabs(value - (lines1g[bid] * d_vertex_x[randomIndex]) - lines3g[bid])<1e-6)
		{
			a1Value[x] = lines1g[bid];
			//	printf("%d\n", x);
			x++;

		}

	}

}
__global__ void testing(
	bool    *judge,
	bool    *judge1,
	double *d_vertex_x,
	double *d_vertex_y,
	int randomIndex,
	int *l1,
	int *l2,
	double *d_lines1g,
	double *d_lines3g,
	double *d_lines1h,
	double *d_lines3h,
	double *value,
	double *valueh,
	double leftBound,
	double rightBound,
	double *optimalAnswer_x,
	double *optimalAnswer_y,
	int position_Sg,
	int position_sg,
	int position_Sh,
	int position_sh
)
{
	int bid = threadIdx.x + blockDim.x*blockIdx.x;
	*judge = false;
	*judge1 = true;

	if (bid == 0) {

		if (fabs(value[position_Sg] - valueh[position_sh]) < DBL_EPSILON) {
			//	if (sg > 0 && sg >= Sh) {
			if (d_lines1g[position_sg]>0 && d_lines1g[position_sg] >= d_lines1h[position_Sh]) {
				// x* < x'
				//if (sh != Sh) {
				if (d_lines1h[position_sh] != d_lines1h[position_Sh]) {
					//	sh = DBL_EPSILON;
					//	d_lines1h[positionH] = DBL_EPSILON;
					l2[position_sh] = -1;
					//		printf("a\n");
				}
				//if (sg != Sg) {
				if (d_lines1g[position_sg] != d_lines1g[position_Sg]) {
					//	Sg = DBL_EPSILON;
					//	d_lines1g[position] = DBL_EPSILON;
					l1[position_Sg] = -1;
					//			printf("b\n");
				}
				rightBound = d_vertex_x[randomIndex];
				//		judgePrune(d_lines1g, arrayG1, arrayG1.size());
				//		printf("c\n");
				//		return DBL_EPSILON;
			}
			//else if (Sg < 0 && Sg <= sh) {
			else if (d_lines1g[position_Sg]<0 && d_lines1g[position_Sg] <= d_lines1h[position_sh]) {
				// x* > x'
				//	if (sh !=Sh) {
				if (d_lines1h[position_sh] != d_lines1h[position_Sh]) {
					//	Sh = DBL_EPSILON;
					//	d_lines1h[maxmizeH_position1] = DBL_EPSILON;
					//			printf("d\n");
					l2[position_Sh] = -1;
				}
				//	if (sg != Sg) {
				if (d_lines1g[position_sg] != d_lines1g[position_Sg]) {
					//	sg = DBL_EPSILON;
					//	d_lines1g[position_sg] = DBL_EPSILON;
					//			printf("e\n");
					l1[position_sg] = -1;
				}
				leftBound = d_vertex_x[randomIndex];
				//		judgePrune(d_lines1g, arrayG1, arrayG1.size());
				//		printf("f\n");
				//		return DBL_EPSILON;
			}
			else {

				*optimalAnswer_x = d_vertex_x[randomIndex];
				*optimalAnswer_y = d_vertex_y[randomIndex];
				//	printf("g\n");
				//	printf("%lf %lf\n", optimalAnswer_x, optimalAnswer_y);

				*judge = true;
			}
		}
		else if (value[position_Sg] > valueh[position_sh]) {
			//if (sg > Sh) {
			if (d_lines1g[position_sg]>d_lines1h[position_Sh])
				// x* < x'
				//	if (sh != Sh) {
				if (d_lines1h[position_sh] != d_lines1h[position_Sh]) {
					//		sh = DBL_EPSILON;
					//d_lines1h[positionH] = DBL_EPSILON;
					//		printf("h\n");
					l2[position_sh] = -1;
				}
			//	if (sg != Sg) {
			if (d_lines1g[position_sg] != d_lines1g[position_Sg]) {
				//		Sg = DBL_EPSILON;
				//	d_lines1g[position] = DBL_EPSILON;
				//		printf("i\n");
				l1[position_Sg] = -1;
			}

			else {
				if (randomIndex % 2 == 0) {
					if (d_lines1g[randomIndex] < d_lines1g[randomIndex - 1]) {
						//	d_lines1g[randomIndex - 1] = DBL_EPSILON;
						l1[randomIndex - 1] = -1;
						//				printf("j\n");
					}
					else if (d_lines1g[randomIndex] > d_lines1g[randomIndex - 1]) {
						//d_lines1g[randomIndex] = DBL_EPSILON;
						//				printf("k\n");
						l1[randomIndex] = -1;
					}
					//			judgePrune(d_lines1g, arrayG1, arrayG1.size());
					//			printf("l\n");
				}
				else {
					if (d_lines1g[randomIndex + 1] < d_lines1g[randomIndex]) {
						//		d_lines1g[randomIndex] = DBL_EPSILON;
						//		printf("m\n");
						l1[randomIndex] = -1;

					}
					else if (d_lines1g[randomIndex + 1] > d_lines1g[randomIndex]) {
						//	d_lines1g[randomIndex + 1] = DBL_EPSILON;
						//				printf("n\n");
						l1[randomIndex + 1] = -1;
					}
					//			judgePrune(d_lines1g, arrayG1, arrayG1.size());
					//			printf("o\n");
				}
			}

			rightBound = d_vertex_x[randomIndex];
			//	judgePrune(d_lines1g, arrayG1, arrayG1.size());
			//	optimalAnswer_x = d_vertex_x[randomIndex];;
			//	optimalAnswer_y = d_vertex_y[randomIndex];;
			//	printf("%lf %lf\n", optimalAnswer_x, optimalAnswer_y);
			//	printf("p\n");
			//	return true;
			//		return DBL_EPSILON;
		}
		//else if (Sg < sh) {
		else if (d_lines1g[position_Sg]<d_lines1h[position_sh]) {
			// x* > x'
			//if (sh != Sh) {
			if (d_lines1h[position_sh] != d_lines1h[position_Sh]) {
				//Sh = DBL_EPSILON;
				//	d_lines1h[maxmizeH_position1] = DBL_EPSILON;
				l2[position_Sh] = -1;
				//		printf("q\n");
			}
			//	if (sg != Sg) {
			if (d_lines1g[position_sg] != d_lines1g[position_Sg]) {
				//	sg = DBL_EPSILON;
				//	d_lines1g[positionH] = DBL_EPSILON;
				l1[position_sg] = -1;
				//		printf("r\n");
			}

			else {
				if (randomIndex % 2 == 0) {
					if (d_lines1g[randomIndex] < d_lines1g[randomIndex - 1]) {
						//	d_lines1g[randomIndex] = DBL_EPSILON;
						l1[randomIndex] = -1;
						//				printf("s\n");
					}
					else if (d_lines1g[randomIndex] > d_lines1g[randomIndex - 1]) {
						//	d_lines1g[randomIndex - 1] = DBL_EPSILON;
						l1[randomIndex - 1] = -1;
						//				printf("t\n");
					}
					//			judgePrune(d_lines1g, arrayG1, arrayG1.size());
					//			printf("u\n");
				}

				else {
					if (d_lines1g[randomIndex + 1] < d_lines1g[randomIndex]) {
						//d_lines1g[randomIndex + 1] = DBL_EPSILON;
						l1[randomIndex + 1] = -1;
						//				printf("v\n");
					}
					else if (d_lines1g[randomIndex + 1] > d_lines1g[randomIndex]) {
						//	d_lines1g[randomIndex] = DBL_EPSILON;
						l1[randomIndex] = -1;
						//				printf("w\n");
					}
				}
			}
			leftBound = d_vertex_x[randomIndex];
			//	judgePrune(d_lines1g, arrayG1, arrayG1.size());
			//	printf("x\n");
			//			return DBL_EPSILON;
		}
		//	else if ((sg - Sh) <= 0 && 0 <= (Sg - sh)) {
		else if ((d_lines1g[position_sg] - d_lines1h[position_Sh]) <= 0 && 0 <= (d_lines1g[position_Sg] - d_lines1h[position_sh])) {
			// no feasible
			//	printf("No feasible Answer!\n");
			*judge1 = false;
		}
	}
	else if (value[position_Sg] < valueh[position_sh]) {
		//if (sg > 0) {
		if (d_lines1g[position_sg]) {
			//		if (sg != Sg) {
			if (d_lines1g[position_sg] != d_lines1g[position_Sg]) {
				//		Sg = DBL_EPSILON;
				//d_lines1g[position] = DBL_EPSILON;
				l1[position_Sg] = -1;
				//		printf("y\n");
			}
			else {
				if (randomIndex % 2 == 0) {
					if (d_lines1g[randomIndex] < d_lines1g[randomIndex - 1]) {
						//	d_lines1g[randomIndex - 1] = DBL_EPSILON;
						l1[randomIndex - 1] = -1;
						//				printf("z\n");
					}
					else if (d_lines1g[randomIndex] > d_lines1g[randomIndex - 1]) {
						//	d_lines1g[randomIndex] = DBL_EPSILON;
						//				printf("aa\n");
						l1[randomIndex] = -1;
					}
					//			judgePrune(d_lines1g, arrayG1, arrayG1.size());
					//			printf("ab\n");
				}
				else {
					if (d_lines1g[randomIndex + 1] < d_lines1g[randomIndex]) {
						//	d_lines1g[randomIndex] = DBL_EPSILON;
						l1[randomIndex] = -1;
						//				printf("ac\n");
					}
					else if (d_lines1g[randomIndex + 1] > d_lines1g[randomIndex]) {
						//	d_lines1g[randomIndex + 1] = DBL_EPSILON;
						l1[randomIndex + 1] = -1;
						//				printf("ad\n");
					}
				}
			}
			rightBound = d_vertex_x[randomIndex];
			//	judgePrune(d_lines1g, arrayG1, arrayG1.size());
			//	printf("ae\n");
			//		return DBL_EPSILON;
		}
		//else if (Sg < 0) {
		else  if (d_lines1g[position_Sg]<0) {
			// x* > x'
			//	if (sg != Sg) {
			if (d_lines1g[position_sg] != d_lines1g[position_Sg]) {
				//sg = DBL_EPSILON;
				//	d_lines1g[positionH] = DBL_EPSILON;
				l1[position_sg] = -1;
				//		printf("af\n");
			}
			else {
				if (randomIndex % 2 == 0) {
					if (d_lines1g[randomIndex] < d_lines1g[randomIndex - 1]) {
						//	d_lines1g[randomIndex] = DBL_EPSILON;
						l1[randomIndex] = -1;
						//				printf("ag\n");
					}
					else if (d_lines1g[randomIndex] > d_lines1g[randomIndex - 1]) {
						//d_lines1g[randomIndex - 1] = DBL_EPSILON; 
						l1[randomIndex - 1] = -1;
						//					printf("ah\n");
					}

				}
				else {
					if (d_lines1g[randomIndex + 1] < d_lines1g[randomIndex]) {
						//d_lines1g[randomIndex + 1] = DBL_EPSILON;
						l1[randomIndex + 1] = -1;
						//				printf("ai\n");
					}
					else if (d_lines1g[randomIndex + 1] > d_lines1g[randomIndex]) {
						//	d_lines1g[randomIndex] = DBL_EPSILON;
						l1[randomIndex] = -1;
						//				printf("ak\n");
					}
				}
				//		judgePrune(d_lines1g, arrayG1, arrayG1.size());
				leftBound = d_vertex_x[randomIndex];
				//			printf("al\n");
			}
		}
		leftBound = d_vertex_x[randomIndex];
		//	judgePrune(d_lines1g, arrayG1, arrayG1.size());
		//	printf("am\n");
		//		return DBL_EPSILON;
	}
	//else if (sg <= 0 && 0 <= Sg) {
	else if (d_lines1g[position_sg] <= 0 && 0 <= d_lines1g[position_Sg]) {
		*optimalAnswer_x = d_vertex_x[randomIndex];;
		*optimalAnswer_y = d_vertex_y[randomIndex];;
		//	printf("%lf %lf\n", optimalAnswer_x, optimalAnswer_y);
		//	printf("amn\n");
		*judge = true;
	}
}


int main()
{
	double leftBound, rightBound;
	double aTemp, bTemp, cTemp;
	struct Objfunc object;
	double rotationAngleTemp;

	FILE* fp;

	int numberOfLines = 0;
	printf("!!!!666!\n");
	fp = fopen("dataset2.txt", "r");

	while (1) {
		fscanf_s(fp, "%lf%lf%lf", &aTemp, &bTemp, &cTemp);
		if (aTemp == 0.0 && bTemp == 0.0 && cTemp == 0.0) {
			break;
		}
		struct Line lineTemp;
		lineTemp.a1 = aTemp;
		lineTemp.a2 = bTemp;
		lineTemp.b = cTemp;
		originalConstraints.push_back(lineTemp);
		numberOfLines++;
	}
	object.c1 = 66.743980;
	object.c2 = 689.626759;
	thrust::host_vector<double>   lines1(numberOfLines);
	thrust::device_vector<int>  arrayG1(numberOfLines);
	thrust::device_vector<int>  arrayH1(numberOfLines);
	thrust::device_vector<int>  arrayB1(numberOfLines);
	printf("!!!!55555!\n");

	leftBound = -10000;
	rightBound = 10000;
	rotationAngleTemp = atan(-object.c1 / object.c2);

	struct Line *d_constrainstans;

	double *d_arrayG;
	double *d_arrayH;
	int size = numberOfLines * sizeof(struct Line);

	HANDLE_ERROR(cudaMalloc((void**)&d_constrainstans, size));

	HANDLE_ERROR(cudaMalloc((void**)&d_arrayG, size));
	HANDLE_ERROR(cudaMalloc((void**)&d_arrayH, size));

	HANDLE_ERROR(cudaMemcpy(d_constrainstans, originalConstraints.data(), size, cudaMemcpyHostToDevice));
	printf("!!44444!!!\n");
	int numberOfBlocks = ceil((float)numberOfLines / block_width);
	thrust::device_vector<double>  d_lines1(numberOfLines);
	thrust::device_vector<double>  d_lines2(numberOfLines);
	thrust::device_vector<double>  d_lines3(numberOfLines);
	thrust::device_vector<double>  d_lines_judge(numberOfLines);
	printf("!!!!33333!\n");
	rotation << <numberOfBlocks, block_width >> >
		(d_constrainstans,
			thrust::raw_pointer_cast(&d_lines1[0]),
			thrust::raw_pointer_cast(&d_lines2[0]),
			thrust::raw_pointer_cast(&d_lines3[0]),
			thrust::raw_pointer_cast(&d_lines_judge[0]),
			rotationAngleTemp,
			numberOfLines);
	//d_lines1[5] = 3.11;
	//double host1[5];
	//cudaMemcpy(host1, thrust::raw_pointer_cast(&d_lines1[0]),5*sizeof(double), cudaMemcpyDeviceToHost);
	//printf("d____%lf\n",host1[5]);
	seprationG(d_lines_judge, arrayG1, numberOfLines);
	//	printf("SIZE:%d\n", arrayG1.size());
	seprationH(d_lines_judge, arrayH1, numberOfLines);
	//printf("Size:%d\n", m);
	seprationZero(d_lines_judge, arrayB1, numberOfLines);
	printf("!!!!22222!\n");
	int sizeG = arrayG1.size();
	int sizeH = arrayH1.size();
	printf("sg:%d\n", sizeG);
	printf("sh:%d\n", sizeH);
	double *optimalAnswer_x;
	double *optimalAnswer_y;
	HANDLE_ERROR(cudaMalloc((void**)&optimalAnswer_x, sizeof(double)));
	HANDLE_ERROR(cudaMalloc((void**)&optimalAnswer_y, sizeof(double)));
	printf("!!!!1111!\n");

	while (1) {
		int sizeG = arrayG1.size();
		int sizeH = arrayH1.size();
		//	printf("sizeG:%d\n\n", sizeG);

		printf("!!!!1111!\n");
		int randomIndex = (getRandomInt(&randomSeed, sizeG));
		thrust::device_vector<double>  d_Sg(sizeG);
		thrust::device_vector<double>  d_sg(sizeG);
		thrust::device_vector<double>  d_Sh(sizeH);
		thrust::device_vector<double>  d_sh(sizeH);

		thrust::device_vector<double>  value(sizeG);
		thrust::device_vector<double>  valueh(sizeG);
		thrust::device_vector<double>  d_vertex_x(sizeH / 2);
		thrust::device_vector<double>  d_vertex_y(sizeH / 2);
		thrust::device_vector<double>  d_lines1g(sizeG);
		thrust::device_vector<double>  d_lines2g(sizeG);
		thrust::device_vector<double>  d_lines3g(sizeG);
		thrust::device_vector<double>  d_vertexh_x(sizeG / 2);
		thrust::device_vector<double>  d_vertexh_y(sizeG / 2);
		thrust::device_vector<double>  d_lines1h(sizeH);
		thrust::device_vector<double>  d_lines2h(sizeH);
		thrust::device_vector<double>  d_lines3h(sizeH);

		intersection << <numberOfBlocks, block_width >> > (
			thrust::raw_pointer_cast(&d_lines1[0]),
			thrust::raw_pointer_cast(&d_lines2[0]),
			thrust::raw_pointer_cast(&d_lines3[0]),
			thrust::raw_pointer_cast(&d_lines1g[0]),
			thrust::raw_pointer_cast(&d_lines2g[0]),
			thrust::raw_pointer_cast(&d_lines3g[0]),
			thrust::raw_pointer_cast(&arrayG1[0]),
			thrust::raw_pointer_cast(&d_vertex_x[0]),
			thrust::raw_pointer_cast(&d_vertex_y[0]),
			numberOfLines
			);
		//    int k = judgePrune(d_lines1g, arrayG1, arrayG1.size());

		//	int m = judgePrune(d_lines1h, arrayH1, arrayH1.size());
		//	printf("%d   %d\n\n\n", k,m );
		intersection << <numberOfBlocks, block_width >> > (
			thrust::raw_pointer_cast(&d_lines1[0]),
			thrust::raw_pointer_cast(&d_lines2[0]),
			thrust::raw_pointer_cast(&d_lines3[0]),
			thrust::raw_pointer_cast(&d_lines1h[0]),
			thrust::raw_pointer_cast(&d_lines2h[0]),
			thrust::raw_pointer_cast(&d_lines3h[0]),
			thrust::raw_pointer_cast(&arrayH1[0]),
			thrust::raw_pointer_cast(&d_vertexh_x[0]),
			thrust::raw_pointer_cast(&d_vertexh_y[0]),
			numberOfLines
			);

		//find Sg sg Sh sh
		findSgvalue << <numberOfBlocks, block_width >> > (
			thrust::raw_pointer_cast(&d_vertex_x[0]),
			thrust::raw_pointer_cast(&d_lines3g[0]),
			thrust::raw_pointer_cast(&d_lines1g[0]),
			thrust::raw_pointer_cast(&value[0]),
			randomIndex,
			arrayG1.size() / 2
			);

		findSgvalue << <numberOfBlocks, block_width >> > (
			thrust::raw_pointer_cast(&d_vertex_x[0]),
			thrust::raw_pointer_cast(&d_lines3h[0]),
			thrust::raw_pointer_cast(&d_lines1h[0]),
			thrust::raw_pointer_cast(&valueh[0]),
			randomIndex,
			arrayH1.size() / 2
			);

		thrust::device_vector<double>::iterator xprimeG_position = thrust::max_element(value.begin(), value.end());
		/*unsigned int position = xprimeG_position - value.begin();
		double xprimeG = value[position];*/
		//unsigned int position1 = xprimeG_position - value.begin();
		unsigned int position_Sg = xprimeG_position - value.begin();

		thrust::device_vector<double>::iterator minimizeG_position = thrust::min_element(value.begin(), value.end());
		//unsigned int minimizeG_position1 = minimizeG_position - value.begin();
		unsigned int position_sg = minimizeG_position - value.begin();
		//unsigned int position2 = minimizeG_position - value.begin();


		thrust::device_vector<double>::iterator xprimeH_position = thrust::min_element(valueh.begin(), valueh.end());
		/*	unsigned int positionH = xprimeH_position - valueh.begin();
		double xprimeH = valueh[positionH];*/
		unsigned int position_sh = xprimeH_position - valueh.begin();
		//		unsigned int position3 = xprimeH_position - valueh.begin();



		thrust::device_vector<double>::iterator maxmizeH_position = thrust::max_element(valueh.begin(), valueh.end());
		//	unsigned int maxmizeH_position1 = maxmizeH_position - valueh.begin();
		unsigned int position_Sh = maxmizeH_position - valueh.begin();
		//	unsigned int position4 = maxmizeH_position - valueh.begin();


		//	printf("Sh:%lf\n", Sh);
		bool *d_judge;
		HANDLE_ERROR(cudaMalloc((void**)&d_judge, sizeof(bool)));
		bool *d_judge1;
		HANDLE_ERROR(cudaMalloc((void**)&d_judge1, sizeof(bool)));

		testing << <1, 1 >> >
			(
				d_judge,
				d_judge1,
				thrust::raw_pointer_cast(&d_vertex_x[0]),
				thrust::raw_pointer_cast(&d_vertex_y[0]),
				randomIndex,
				thrust::raw_pointer_cast(&arrayG1[0]),
				thrust::raw_pointer_cast(&arrayH1[0]),
				thrust::raw_pointer_cast(&d_lines1g[0]),
				thrust::raw_pointer_cast(&d_lines3g[0]),
				thrust::raw_pointer_cast(&d_lines1h[0]),
				thrust::raw_pointer_cast(&d_lines3h[0]),
				thrust::raw_pointer_cast(&value[0]),
				thrust::raw_pointer_cast(&valueh[0]),
				leftBound,
				rightBound,
				optimalAnswer_x,
				optimalAnswer_y,
				position_Sg,
				position_sg,
				position_sh,
				position_Sh
				);


		thrust::device_vector<int>  arrayTempG(arrayG1.size());
		thrust::device_vector<int>  arrayTempH(arrayH1.size());

		//judgePrune(arrayG1, arrayTempG, arrayG1.size());
		//judgePrune(arrayH1, arrayTempH, arrayH1.size());
		arrayG1.erase(thrust::remove_if(thrust::device, arrayG1.begin(), arrayG1.end(), is_prune()), arrayG1.end());
		arrayH1.erase(thrust::remove_if(thrust::device, arrayH1.begin(), arrayH1.end(), is_prune()), arrayH1.end());

		//	thrust::remove_if(thrust::device, arrayG1.begin(), arrayG1.end(), is_prune());
		//	thrust::remove_if(thrust::device, arrayH1.begin(), arrayH1.end(), is_prune());

		printf("%d\n", arrayG1.size());
		printf("%d\n", arrayH1.size());

		/*	thrust::copy(arrayTempG.begin(), arrayTempG.end(), arrayG1.begin());
		thrust::copy(arrayTempH.begin(), arrayTempH.end(), arrayH1.begin());*/
		bool judge;
		printf("111\n");
		bool judge1;
		HANDLE_ERROR(cudaMemcpy(&judge, d_judge, sizeof(bool), cudaMemcpyDeviceToHost));
		HANDLE_ERROR(cudaMemcpy(&judge1, d_judge1, sizeof(bool), cudaMemcpyDeviceToHost));
		printf("222\n");
		if (judge) {
			double x;

			printf("3\n");

			double y;
			HANDLE_ERROR(cudaMemcpy(&x, optimalAnswer_x, sizeof(double), cudaMemcpyDeviceToHost));
			HANDLE_ERROR(cudaMemcpy(&y, optimalAnswer_y, sizeof(double), cudaMemcpyDeviceToHost));

			printf("optimal answer:%lf %lf \n", x, y);



			exit(0);
		}
		
		if (!judge1) {
			printf("No feasible Answer");
			exit(0);
		}
		if (arrayG1.size() == 1) {
			printf("special case!\n");
			exit(0);
		}
		else continue;
	}

}
